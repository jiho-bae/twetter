{"version":3,"sources":["components/Twett.js","components/AuthForm.js","routes/Auth.js","components/TwettFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js","fbase.js"],"names":["Twett","twettObj","isOwner","useState","editing","setEditing","text","newTwett","setNewTwett","onDeleteClick","a","global","confirm","dbService","doc","id","delete","storageService","refFromURL","savedFileUrl","toggleEditing","prev","onSubmit","event","preventDefault","update","className","type","placeholder","value","required","onChange","target","onClick","src","class","icon","faTrash","faPencilAlt","AuthForm","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","name","authService","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","Auth","onSocialClick","provider","firebaseInstance","auth","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","TwettFactory","userObj","twett","setTwett","fileUrl","setFileUrl","fileRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","maxLength","for","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","twetts","setTwetts","useEffect","orderBy","onSnapshot","snapshot","twettArray","docs","map","marginTop","Profile","refreshUser","displayName","newDisplayName","setNewDisplayName","history","useHistory","updateProfile","autoFocus","signOut","push","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","fro","App","init","setInit","setUserObj","onAuthStateChanged","user","args","Boolean","currentUser","ReactDOM","render","document","getElementById","firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","storage"],"mappings":"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","file":"static/js/main.66736cd8.chunk.js","sourcesContent":["import { dbService, storageService } from \"fbase\";\nimport React, { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Twett = ({ twettObj, isOwner }) => {\n  const [editing, setEditing] = useState(false);\n  const [newTwett, setNewTwett] = useState(twettObj.text);\n\n  const onDeleteClick = async () => {\n    const ok = global.confirm(\"Are you sure you want to delete this twett?\");\n    if (ok) {\n      await dbService.doc(`twetts/${twettObj.id}`).delete();\n      await storageService.refFromURL(twettObj.savedFileUrl).delete();\n    }\n  };\n  const toggleEditing = () => setEditing((prev) => !prev);\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    await dbService.doc(`twetts/${twettObj.id}`).update({\n      text: newTwett,\n    });\n    setEditing(false);\n  };\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setNewTwett(value);\n  };\n  return (\n    <div className=\"twett\">\n      {editing ? (\n        <>\n          {isOwner && (\n            <>\n              <form onSubmit={onSubmit} className=\"container twettEdit\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Edit your twett\"\n                  value={newTwett}\n                  required\n                  onChange={onChange}\n                />\n                <input type=\"submit\" value=\"Update Twett\" className=\"formBtn\" />\n              </form>\n              <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\n                Cancel\n              </span>\n            </>\n          )}\n        </>\n      ) : (\n        <>\n          <h4>{twettObj && twettObj.text}</h4>\n          {twettObj.savedFileUrl && <img src={twettObj.savedFileUrl} />}\n          {isOwner && (\n            <div class=\"twett__actions\">\n              <span onClick={onDeleteClick}>\n                <FontAwesomeIcon icon={faTrash} />\n              </span>\n              <span onClick={toggleEditing}>\n                <FontAwesomeIcon icon={faPencilAlt} />\n              </span>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Twett;\n","import React, { useState } from \"react\";\nimport { authService } from \"fbase\";\n\nconst AuthForm = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [newAccount, setNewAccount] = useState(true);\n  const [error, setError] = useState();\n\n  const onChange = (event) => {\n    const {\n      target: { name, value },\n    } = event;\n    if (name === \"email\") {\n      setEmail(value);\n    } else {\n      setPassword(value);\n    }\n  };\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      let data;\n      if (newAccount) {\n        data = await authService.createUserWithEmailAndPassword(\n          email,\n          password\n        );\n      } else {\n        data = await authService.signInWithEmailAndPassword(email, password);\n      }\n      console.log(data);\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  const toggleAccount = () => setNewAccount((prev) => !prev);\n  return (\n    <>\n      <form onSubmit={onSubmit} className=\"container\">\n        <input\n          name=\"email\"\n          type=\"email\"\n          placeholder=\"Email\"\n          required\n          value={email}\n          onChange={onChange}\n          className=\"authInput\"\n        />\n        <input\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Password\"\n          required\n          value={password}\n          onChange={onChange}\n          className=\"authInput\"\n        />\n        <input\n          type=\"submit\"\n          className=\"authInput authSubmit\"\n          value={newAccount ? \"Create Account\" : \"Log In\"}\n        />\n        {error && <span className=\"authError\">{error}</span>}\n      </form>\n      <span onClick={toggleAccount} className=\"authSwitch\">\n        {newAccount ? \"Sign In\" : \"Create Account\"}\n      </span>\n    </>\n  );\n};\n\nexport default AuthForm;\n","import React from \"react\";\nimport AuthForm from \"components/AuthForm\";\nimport { authService, firebaseInstance } from \"fbase\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTwitter,\n  faGoogle,\n  faGithub,\n} from \"@fortawesome/free-brands-svg-icons\";\n\nconst Auth = () => {\n  const onSocialClick = async (event) => {\n    const {\n      target: { name },\n    } = event;\n    let provider;\n    if (name === \"google\") {\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\n    } else if (name === \"github\") {\n      provider = new firebaseInstance.auth.GithubAuthProvider();\n    }\n    await authService.signInWithPopup(provider);\n  };\n  return (\n    <div className=\"authContainer\">\n      <FontAwesomeIcon\n        icon={faTwitter}\n        color={\"#04AAFF\"}\n        size=\"3x\"\n        style={{ marginBottom: 30 }}\n      />\n      <AuthForm />\n      <div className=\"authBtns\">\n        <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\n          Continue with Google <FontAwesomeIcon icon={faGoogle} />\n        </button>\n        <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\n          Continue with Github <FontAwesomeIcon icon={faGithub} />\n        </button>\n      </div>\n    </div>\n  );\n};\nexport default Auth;\n","import React, { useState } from \"react\";\nimport { dbService, storageService } from \"fbase\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nconst TwettFactory = ({ userObj }) => {\n  const [twett, setTwett] = useState(\"\");\n  const [fileUrl, setFileUrl] = useState(\"\");\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    if (twett === \"\") return;\n    let savedFileUrl = \"\";\n    if (fileUrl !== \"\") {\n      const fileRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\n      const response = await fileRef.putString(fileUrl, \"data_url\");\n      savedFileUrl = await response.ref.getDownloadURL();\n    }\n    const twettObj = {\n      text: twett,\n      createdAt: Date.now(),\n      creatorId: userObj.uid,\n      savedFileUrl,\n    };\n    await dbService.collection(\"twetts\").add(twettObj);\n    setTwett(\"\");\n    setFileUrl(\"\");\n  };\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setTwett(value);\n  };\n\n  const onFileChange = (event) => {\n    const {\n      target: { files },\n    } = event;\n    const theFile = files[0];\n    const reader = new FileReader();\n    reader.onloadend = (finishedEvent) => {\n      const {\n        currentTarget: { result },\n      } = finishedEvent;\n      setFileUrl(result);\n    };\n    reader.readAsDataURL(theFile);\n  };\n\n  const onClearFileUrlClick = () => setFileUrl(\"\");\n\n  return (\n    <form onSubmit={onSubmit} className=\"factoryForm\">\n      <div className=\"factoryInput__container\">\n        <input\n          className=\"factoryInput__input\"\n          value={twett}\n          onChange={onChange}\n          type=\"text\"\n          placeholder=\"What's on your mind?\"\n          maxLength={120}\n        />\n        <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\n      </div>\n      <label for=\"attach-file\" className=\"factoryInput__label\">\n        <span>Add photos</span>\n        <FontAwesomeIcon icon={faPlus} />\n      </label>\n      <input\n        id=\"attach-file\"\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={onFileChange}\n        style={{ opacity: 0 }}\n      />\n      {fileUrl && (\n        <div className=\"factoryForm__fileUrl\">\n          <img src={fileUrl} style={{ backgroundImage: fileUrl }} />\n          <div className=\"factoryForm__clear\" onClick={onClearFileUrlClick}>\n            <span>Remove</span>\n            <FontAwesomeIcon icon={faTimes} />\n          </div>\n        </div>\n      )}\n    </form>\n  );\n};\nexport default TwettFactory;\n","import React, { useEffect, useState } from \"react\";\nimport { dbService } from \"fbase\";\nimport Twett from \"components/Twett\";\nimport TwettFactory from \"components/TwettFactory\";\n\nconst Home = ({ userObj }) => {\n  const [twetts, setTwetts] = useState(\"\");\n\n  useEffect(() => {\n    dbService\n      .collection(\"twetts\")\n      .orderBy(\"createdAt\", \"desc\")\n      .onSnapshot((snapshot) => {\n        const twettArray = snapshot.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        setTwetts(twettArray);\n      });\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <TwettFactory userObj={userObj} />\n      <div style={{ marginTop: 30 }}>\n        {twetts &&\n          twetts.map((twett) => (\n            <Twett\n              key={twett.id}\n              twettObj={twett}\n              isOwner={twett.creatorId === userObj.uid}\n            />\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import { authService } from \"fbase\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Profile = ({ refreshUser, userObj }) => {\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n\n  const history = useHistory();\n  const onLogOutClick = () => {\n    authService.signOut();\n    history.push(\"/\");\n    refreshUser();\n  };\n\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setNewDisplayName(value);\n  };\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    if (userObj.displayName !== newDisplayName) {\n      await userObj.updateProfile({\n        displayName: newDisplayName,\n      });\n      refreshUser();\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <form onSubmit={onSubmit} className=\"profileForm\">\n        <input\n          onChange={onChange}\n          type=\"text\"\n          autoFocus\n          placeholder=\"Display name\"\n          value={newDisplayName}\n          className=\"formInput\"\n        />\n        <input\n          type=\"submit\"\n          value=\"Update Profile\"\n          className=\"formBtn\"\n          style={{\n            marginTop: 10,\n          }}\n        />{\" \"}\n      </form>\n      <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\n        Log Out\n      </span>\n    </div>\n  );\n};\n\nexport default Profile;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Navigation = ({ userObj }) => (\n  <nav>\n    <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\n      <li>\n        <Link to=\"/\" style={{ marginRight: 10 }}>\n          <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\n        </Link>\n      </li>\n      <li>\n        <Link\n          to=\"/profile\"\n          style={{\n            marginLeft: 10,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            fontSize: 12,\n          }}\n        >\n          <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\n          <span style={{ marginTop: 10 }}>\n            {userObj.displayName\n              ? `${userObj.displayName}의 Profile`\n              : \"Profile\"}\n          </span>\n        </Link>\n      </li>\n    </ul>\n  </nav>\n);\n\nexport default Navigation;\n","import React from \"react\";\nimport {\n  HashRouter as Router,\n  Redirect,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport Auth from \"routes/Auth\";\nimport Home from \"routes/Home\";\nimport Profile from \"routes/Profile\";\nimport Navigation from \"components/Navigation\";\n\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\n  return (\n    <Router>\n      {isLoggedIn && <Navigation userObj={userObj} />}\n      <Switch>\n        {isLoggedIn ? (\n          <div\n            style={{\n              maxWidth: 890,\n              width: \"100%\",\n              margin: \"0 auto\",\n              marginTop: 80,\n              display: \"flex\",\n              justifyContent: \"center\",\n            }}\n          >\n            <Route exact path=\"/\">\n              <Home userObj={userObj} />\n            </Route>\n            <Route exact path=\"/profile\">\n              <Profile userObj={userObj} refreshUser={refreshUser} />\n            </Route>\n            <Redirect fro=\"*\" to=\"/\" />\n          </div>\n        ) : (\n          <>\n            <Route exact path=\"/\">\n              <Auth />\n            </Route>\n            <Redirect fro=\"*\" to=\"/\" />\n          </>\n        )}\n      </Switch>\n    </Router>\n  );\n};\n\nexport default AppRouter;\n","import { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        setUserObj(null);\n      }\n      setInit(true);\n    });\n  }, []);\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  };\n  return (\n    <>\n      {init ? (\n        <AppRouter\n          isLoggedIn={Boolean(userObj)}\n          userObj={userObj}\n          refreshUser={refreshUser}\n        />\n      ) : (\n        \"Initializing...\"\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"components/App\";\nimport \"./styles.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_ID,\n  appId: process.env.REACT_APP_APP_ID,\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseInstance = firebase;\n\nexport const authService = firebase.auth();\nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage();\n"],"sourceRoot":""}